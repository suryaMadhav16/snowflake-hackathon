from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime

class PageMetadata(BaseModel):
    """Schema for page metadata"""
    url: str = Field(..., description="Original URL of the page")
    title: str = Field(..., description="Title of the page")
    crawled_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp of crawl")
    images: List[str] = Field(default_factory=list, description="List of image URLs found on the page")
    keywords: List[str] = Field(default_factory=list, description="Keywords extracted from the page")
    parent_url: Optional[str] = Field(None, description="Parent page URL if applicable")

class CodeSnippet(BaseModel):
    """Schema for code snippets"""
    language: str = Field(..., description="Programming language of the snippet")
    code: str = Field(..., description="The actual code snippet")
    description: str = Field(..., description="Description or context of the code snippet")
    location: str = Field(..., description="Location/context where this snippet appears in the page")

class ProcessedPage(BaseModel):
    """Schema for processed page content"""
    metadata: PageMetadata
    summary: str = Field(..., description="Page summary generated by Groq")
    code_snippets: List[CodeSnippet] = Field(default_factory=list, description="Extracted code snippets")
    markdown_path: str = Field(..., description="Path to the markdown file")
    images_dir: str = Field(..., description="Directory containing downloaded images")
